{"ast":null,"code":"import _asyncToGenerator from \"/home/tequinox/Descargas/Proyecto-Practises-/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../../environments/environment';\nimport * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n    }\n    /**\n     * Comprueba que el token sea válido\n     * @returns Boolean si el token es válido\n     */\n\n\n    isValidToken() {\n      let token = localStorage.getItem('token') + ''; // Obtenemos el token\n\n      if (token == null) {\n        this.router.navigate(['welcome']); // Si no tiene token navega a la navegación\n      }\n\n      return this.sendToken(token); // Envía el token para que sea validado y retorna una respuesta\n    }\n    /**\n     * Inicia sesión de un usuario\n     * @param user : Usuario\n     * @returns : Observable\n     */\n\n\n    login(user) {\n      let userEncrypt = {\n        \"dni\": user.dni,\n        \"password\": CryptoJS.MD5(user.password).toString() // Encriptamos la contraseña\n\n      };\n      return this.http.post(environment.serverAddress + \"/auth/login\", userEncrypt); // Lanzamos la petición y retornamos la respuesta\n    }\n    /**\n     * Cierra sesión\n     */\n\n\n    logout() {\n      localStorage.removeItem('token'); // Borra el token \n\n      this.router.navigate(['welcome']); // Navega a la pantalla de bienvenida\n    }\n    /**\n     * Establece el token del usuario\n     * @param token : Token del usuario\n     */\n\n\n    setToken(token) {\n      localStorage.setItem('token', token);\n    }\n    /**\n     * Obtiene el token\n     * @returns Token del usuario\n     */\n\n\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    /**\n     *\n     * @param user Registra un usuario\n     * @returns Observable\n     */\n\n\n    register(user) {\n      user.password = CryptoJS.MD5(user.password).toString(); // Encriptamos la contraseña             \n\n      return this.http.post(environment.serverAddress + \"/auth/register\", user); // Lanzamos la petición y devolvemos el observable\n    }\n    /**\n     * Envía el token\n     * @param token : Token a comprobar\n     * @returns Observable\n     */\n\n\n    sendToken(token) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        return yield _this.http.get(environment.serverAddress + '/auth/checktoken', _this.getHeadersToken()).toPromise() // Lanzamos la petición\n        .then(() => {\n          return true; // Si es válido retornamos true\n        }).catch(() => {\n          localStorage.removeItem('token'); // Si no es válido quitamos el token\n\n          _this.router.navigate(['welcome']); // Navegamos a la pantalla de bienvenida\n\n\n          return false;\n        });\n      })();\n    }\n\n    getHeadersToken() {\n      let options = {\n        headers: new HttpHeaders({\n          'Authorization': `Bearer ${this.getToken()}`\n        })\n      };\n      return options;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}