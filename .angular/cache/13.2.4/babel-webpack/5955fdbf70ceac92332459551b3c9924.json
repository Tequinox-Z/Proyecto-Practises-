{"ast":null,"code":"import Keyboard from \"simple-keyboard\";\nimport \"simple-keyboard/build/css/index.css\";\nimport * as $ from \"jquery\";\nimport \"jqueryui\";\nimport \"jquery-ui-dist/jquery-ui\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./shared/Services/Keyboard-service/keyboard-service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"./shared/Components/Scroll-to-up/scroll-to-up.component\";\n\nconst _c0 = function (a0) {\n  return {\n    \"hidden\": a0\n  };\n};\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(keyboardService) {\n      this.keyboardService = keyboardService;\n      this.title = \"Practises-Management\"; // Título de la aplicación\n\n      this.keyboard = undefined;\n      this.keyboardDIVHTML = undefined;\n    }\n\n    ngAfterViewInit() {\n      this.configureKeyboard();\n    }\n\n    configureKeyboard() {\n      this.keyboard = new Keyboard({\n        onKeyPress: button => this.onKeyPress(button),\n        preventMouseDownDefault: true\n      });\n      this.keyboard.setOptions({\n        display: {\n          \"{bksp}\": \"←\",\n          \"{enter}\": \"Enter\",\n          \"{shift}\": \"↑\",\n          \"{shift2}\": \"↓\",\n          \"{tab}\": \"Tab\",\n          \"{space}\": \" \",\n          \"{close}\": \"➘\",\n          \"{doublecom}\": '\"',\n          \"{numeric}\": \"?123\",\n          \"{default}\": \"abc\"\n        },\n        layout: {\n          default: [\"q w e r t y u i o p\", \"a s d f g h j k l ñ\", \"{shift} z x c v b n m {bksp}\", \"{numeric} {space} {close}\"],\n          shift: [\"Q W E R T Y U I O P\", \"A S D F G H J K L Ñ\", \"{shift2} Z X C V B N M {bksp}\", \"{numeric} {space} {close}\"],\n          num: [\"1 2 3 4 5 6 7 8 9 0\", \"@ # ~ _ & - + ( ) /\", `* \" ' : ; ! ? {bksp}`, \"{default} {space} {close}\"]\n        }\n      });\n      this.keyboardDIVHTML = document.querySelector(\"#keyboard-div\");\n      $(\"#keyboard-div\").draggable();\n    }\n\n    hideKeyboard() {\n      var _a;\n\n      (_a = this.keyboardDIVHTML) === null || _a === void 0 ? void 0 : _a.classList.add(\"toDOWN\");\n      setTimeout(() => {\n        var _a;\n\n        (_a = this.keyboardDIVHTML) === null || _a === void 0 ? void 0 : _a.classList.remove(\"toDOWN\");\n        this.keyboardService.showKeyboard(false);\n      }, 600);\n    }\n\n    onKeyPress(keyPress) {\n      if (keyPress === \"{shift}\" || keyPress === \"{shift2}\") this.toggleMayus();else if (keyPress == \"{numeric}\") this.showNumericKeyboard(true);else if (keyPress == \"{default}\") this.showNumericKeyboard(false);else if (keyPress == \"{close}\") this.hideKeyboard();else this.press(keyPress);\n    }\n\n    press(key) {\n      let element = document.activeElement;\n\n      if (element && (element.type == \"text\" || element.type == \"password\" || element.type == \"email\")) {\n        switch (key) {\n          case \"{space}\":\n            element.value = element.value + \" \";\n            break;\n\n          case \"{bksp}\":\n            element.value = element.value.substring(0, element.value.length - 1);\n            break;\n\n          default:\n            element.value = element.value + key;\n            break;\n        }\n      }\n    }\n\n    showNumericKeyboard(showNumeric) {\n      let layout = showNumeric ? \"num\" : \"default\";\n      this.keyboard.setOptions({\n        layoutName: layout\n      });\n    }\n\n    toggleMayus() {\n      let currentLayout = this.keyboard.options.layoutName;\n      let shiftToggle = currentLayout === \"default\" ? \"shift\" : \"default\";\n      this.keyboard.setOptions({\n        layoutName: shiftToggle\n      });\n    }\n\n    click(event) {\n      if (true) {\n        let target = event.target;\n        let sound;\n\n        if (!target.classList.contains(\"hg-button\")) {\n          sound = new Audio(\"assets/sound/click.mp3\");\n        } else {\n          sound = new Audio(\"assets/sound/keyboard-key.mp3\");\n        }\n\n        sound.play();\n      }\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.KeyboardService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 5,\n    vars: 3,\n    consts: [[3, \"click\"], [\"id\", \"keyboard-div\", 3, \"ngClass\"], [1, \"simple-keyboard\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_div_click_0_listener($event) {\n          return ctx.click($event);\n        });\n        i0.ɵɵelement(1, \"router-outlet\");\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelement(3, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"app-scroll-to-up\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(1, _c0, !ctx.keyboardService.isShowKeyboard()));\n      }\n    },\n    directives: [i2.RouterOutlet, i3.NgClass, i4.ScrollToUpComponent],\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}