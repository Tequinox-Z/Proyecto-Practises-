{"ast":null,"code":"import _asyncToGenerator from \"/home/tequinox/Descargas/Proyecto-Practises-/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nfrom;\n'crypto-js';\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n\n  isValidToken() {\n    let token = localStorage.getItem('token') + '';\n\n    if (token == null) {\n      this.router.navigate(['welcome']);\n    }\n\n    return this.sendToken(token);\n  }\n\n  login(user) {\n    user.password = CryptoJS.MD5(user.password).toString();\n    return this.http.post(environment.serverAddress + \"/auth/login\", user);\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    this.router.navigate(['welcome']);\n  }\n\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  register(user) {\n    return this.http.post(environment.serverAddress + \"/auth/register\", user);\n  }\n\n  sendToken(token) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        })\n      };\n      return yield _this.http.get(environment.serverAddress + '/auth/checktoken', options).toPromise().then(() => {\n        return true;\n      }).catch(() => {\n        localStorage.removeItem('token');\n\n        _this.router.navigate(['welcome']);\n\n        return false;\n      });\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/tequinox/Descargas/Proyecto-Practises-/src/app/modules/Auth/Services/Auth-service/auth.service.ts"],"names":["HttpHeaders","environment","i0","i1","i2","from","AuthService","constructor","http","router","isValidToken","token","localStorage","getItem","navigate","sendToken","login","user","password","CryptoJS","MD5","toString","post","serverAddress","logout","removeItem","setToken","setItem","getToken","register","options","headers","get","toPromise","then","catch","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nfrom;\n'crypto-js';\nexport class AuthService {\n    constructor(http, router) {\n        this.http = http;\n        this.router = router;\n    }\n    isValidToken() {\n        let token = localStorage.getItem('token') + '';\n        if (token == null) {\n            this.router.navigate(['welcome']);\n        }\n        return this.sendToken(token);\n    }\n    login(user) {\n        user.password = CryptoJS.MD5(user.password).toString();\n        return this.http.post(environment.serverAddress + \"/auth/login\", user);\n    }\n    logout() {\n        localStorage.removeItem('token');\n        this.router.navigate(['welcome']);\n    }\n    setToken(token) {\n        localStorage.setItem('token', token);\n    }\n    getToken() {\n        return localStorage.getItem('token');\n    }\n    register(user) {\n        return this.http.post(environment.serverAddress + \"/auth/register\", user);\n    }\n    async sendToken(token) {\n        const options = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            })\n        };\n        return await this.http.get(environment.serverAddress + '/auth/checktoken', options).toPromise()\n            .then(() => {\n            return true;\n        })\n            .catch(() => {\n            localStorage.removeItem('token');\n            this.router.navigate(['welcome']);\n            return false;\n        });\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}