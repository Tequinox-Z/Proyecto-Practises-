{"ast":null,"code":"import { environment } from '../../../../../../../environments/environment';\nimport * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../../../../Auth/Services/Auth-service/auth.service\";\nimport * as i3 from \"../../../../../Dashboard/Services/UserService/user.service\";\nexport let CentersService = /*#__PURE__*/(() => {\n  class CentersService {\n    constructor(http, auth, userService) {\n      this.http = http;\n      this.auth = auth;\n      this.userService = userService;\n      this.idSchool = null;\n    }\n    /**\n     * Obtiene el centro que administra el administrador\n     * @param dni : Dni del usuario\n     * @returns Observable escuela\n     */\n\n\n    getMyCenter(dni) {\n      return this.http.get(environment.serverAddress + '/administrator/' + dni + '/school', this.auth.getHeadersToken()); // Lanzamos la petición\n    }\n    /**\n     * Obtiene todos los centros por nombre\n     * @param text : Texto\n     * @returns Observable de escuela\n     */\n\n\n    getAllByName(text) {\n      return this.http.get(`${environment.serverAddress}/school?name=${text}`, this.auth.getHeadersToken()); // Lanzamos la petición\n    }\n    /**\n     * Obtiene todos los centros\n     * @returns Lista de centros\n     */\n\n\n    getAll() {\n      return this.http.get(environment.serverAddress + '/school', this.auth.getHeadersToken()); // Lanzamos la petición\n    }\n    /**\n     * Establece el centro por defecto\n     * @param idCenter: Identificador del centro\n     * @returns Observable de colegio\n     */\n\n\n    setCenter(idCenter) {\n      let administrator = {\n        \"dni\": this.userService.getDni().toString() // Creamos un objeto con el dni del usuario\n\n      };\n      return this.http.post(environment.serverAddress + '/school/' + idCenter + '/administrator', administrator, this.auth.getHeadersToken()); // Lanzamos la petición\n    }\n    /**\n     * Obtiene un centro determinado\n     * @param idCenter : Identificador del centro\n     * @returns Observable del centro\n     */\n\n\n    getCenter(idCenter) {\n      return this.http.get(environment.serverAddress + '/school/' + idCenter, this.auth.getHeadersToken()); // Lanzamos la petición\n    }\n    /**\n     * Obtiene los administradores de un centro\n     * @param idCenter : Identificador del centro\n     * @returns Observable de administradores\n     */\n\n\n    getAdministratorsFromCenter(idCenter) {\n      return this.http.get(`${environment.serverAddress}/school/${idCenter}/administrator`, this.auth.getHeadersToken()); // Lanzamos la petición\n    }\n    /**\n     * Obtiene los ciclos de un centro\n     * @param idCenter\n     * @returns\n     */\n\n\n    getProfessionalDegreesFromCenter(idCenter) {\n      return this.http.get(`${environment.serverAddress}/school/${idCenter}/professionalDegree`, this.auth.getHeadersToken()); // Lanzamos la petición\n    }\n\n    newCenter(school) {\n      let newSchool = {\n        name: school.name,\n        address: school.address,\n        password: CryptoJS.MD5(school.password + '').toString(),\n        administrators: school.administrators\n      };\n      return this.http.post(environment.serverAddress + '/school/', newSchool, this.auth.getHeadersToken()); // Lanzamos la petición\n    }\n\n    getIdSchool() {\n      return this.idSchool;\n    }\n\n    setIdSchool(idSchool) {\n      this.idSchool = idSchool;\n    }\n\n  }\n\n  CentersService.ɵfac = function CentersService_Factory(t) {\n    return new (t || CentersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.UserService));\n  };\n\n  CentersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CentersService,\n    factory: CentersService.ɵfac,\n    providedIn: 'root'\n  });\n  return CentersService;\n})();","map":null,"metadata":{},"sourceType":"module"}