{"ast":null,"code":"import _asyncToGenerator from \"/home/tequinox/Descargas/Proyecto-Practises-/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../../environments/environment';\nimport * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router, auth) {\n    this.http = http;\n    this.router = router;\n    this.auth = auth;\n  }\n  /**\n   * Comprueba que el token sea válido\n   * @returns Boolean si el token es válido\n   */\n\n\n  isValidToken() {\n    let token = localStorage.getItem('token') + ''; // Obtenemos el token\n\n    if (token == null) {\n      this.router.navigate(['welcome']); // Si no tiene token navega a la navegación\n    }\n\n    return this.sendToken(token); // Envía el token para que sea validado y retorna una respuesta\n  }\n  /**\n   * Inicia sesión de un usuario\n   * @param user : Usuario\n   * @returns : Observable\n   */\n\n\n  login(user) {\n    let userEncrypt = {\n      \"dni\": user.dni,\n      \"password\": CryptoJS.MD5(user.password).toString() // Encriptamos la contraseña\n\n    };\n    return this.http.post(environment.serverAddress + \"/auth/login\", userEncrypt); // Lanzamos la petición y retornamos la respuesta\n  }\n  /**\n   * Cierra sesión\n   */\n\n\n  logout() {\n    localStorage.removeItem('token'); // Borra el token \n\n    this.router.navigate(['welcome']); // Navega a la pantalla de bienvenida\n  }\n  /**\n   * Establece el token del usuario\n   * @param token : Token del usuario\n   */\n\n\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  /**\n   * Obtiene el token\n   * @returns Token del usuario\n   */\n\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  /**\n   *\n   * @param user Registra un usuario\n   * @returns Observable\n   */\n\n\n  register(user) {\n    user.password = CryptoJS.MD5(user.password).toString(); // Encriptamos la contraseña             \n\n    return this.http.post(environment.serverAddress + \"/auth/register\", user); // Lanzamos la petición y devolvemos el observable\n  }\n  /**\n   * Envía el token\n   * @param token : Token a comprobar\n   * @returns Observable\n   */\n\n\n  sendToken(token) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.http.get(environment.serverAddress + '/auth/checktoken', _this.auth.getHeadersToken()).toPromise() // Lanzamos la petición\n      .then(() => {\n        return true; // Si es válido retornamos true\n      }).catch(() => {\n        localStorage.removeItem('token'); // Si no es válido quitamos el token\n\n        _this.router.navigate(['welcome']); // Navegamos a la pantalla de bienvenida\n\n\n        return false;\n      });\n    })();\n  }\n\n  getHeadersToken() {\n    let options = {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${this.getToken()}`\n      })\n    };\n    return options;\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(AuthService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'any'\n});","map":{"version":3,"sources":["/home/tequinox/Descargas/Proyecto-Practises-/src/app/modules/Auth/Services/Auth-service/auth.service.ts"],"names":["HttpHeaders","environment","CryptoJS","i0","i1","i2","AuthService","constructor","http","router","auth","isValidToken","token","localStorage","getItem","navigate","sendToken","login","user","userEncrypt","dni","MD5","password","toString","post","serverAddress","logout","removeItem","setToken","setItem","getToken","register","get","getHeadersToken","toPromise","then","catch","options","headers","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../../environments/environment';\nimport * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n    constructor(http, router, auth) {\n        this.http = http;\n        this.router = router;\n        this.auth = auth;\n    }\n    /**\n     * Comprueba que el token sea válido\n     * @returns Boolean si el token es válido\n     */\n    isValidToken() {\n        let token = localStorage.getItem('token') + ''; // Obtenemos el token\n        if (token == null) {\n            this.router.navigate(['welcome']); // Si no tiene token navega a la navegación\n        }\n        return this.sendToken(token); // Envía el token para que sea validado y retorna una respuesta\n    }\n    /**\n     * Inicia sesión de un usuario\n     * @param user : Usuario\n     * @returns : Observable\n     */\n    login(user) {\n        let userEncrypt = {\n            \"dni\": user.dni,\n            \"password\": CryptoJS.MD5(user.password).toString() // Encriptamos la contraseña\n        };\n        return this.http.post(environment.serverAddress + \"/auth/login\", userEncrypt); // Lanzamos la petición y retornamos la respuesta\n    }\n    /**\n     * Cierra sesión\n     */\n    logout() {\n        localStorage.removeItem('token'); // Borra el token \n        this.router.navigate(['welcome']); // Navega a la pantalla de bienvenida\n    }\n    /**\n     * Establece el token del usuario\n     * @param token : Token del usuario\n     */\n    setToken(token) {\n        localStorage.setItem('token', token);\n    }\n    /**\n     * Obtiene el token\n     * @returns Token del usuario\n     */\n    getToken() {\n        return localStorage.getItem('token');\n    }\n    /**\n     *\n     * @param user Registra un usuario\n     * @returns Observable\n     */\n    register(user) {\n        user.password = CryptoJS.MD5(user.password).toString(); // Encriptamos la contraseña             \n        return this.http.post(environment.serverAddress + \"/auth/register\", user); // Lanzamos la petición y devolvemos el observable\n    }\n    /**\n     * Envía el token\n     * @param token : Token a comprobar\n     * @returns Observable\n     */\n    async sendToken(token) {\n        return await this.http.get(environment.serverAddress + '/auth/checktoken', this.auth.getHeadersToken()).toPromise() // Lanzamos la petición\n            .then(() => {\n            return true; // Si es válido retornamos true\n        })\n            .catch(() => {\n            localStorage.removeItem('token'); // Si no es válido quitamos el token\n            this.router.navigate(['welcome']); // Navegamos a la pantalla de bienvenida\n            return false;\n        });\n    }\n    getHeadersToken() {\n        let options = {\n            headers: new HttpHeaders({\n                'Authorization': `Bearer ${this.getToken()}`\n            })\n        };\n        return options;\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(AuthService)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'any' });\n"]},"metadata":{},"sourceType":"module"}