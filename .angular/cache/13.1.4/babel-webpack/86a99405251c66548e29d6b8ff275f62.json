{"ast":null,"code":"import _asyncToGenerator from \"/home/tequinox/Descargas/Proyecto-Practises-/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n\n  isValidToken() {\n    let result;\n    let token = localStorage.getItem('token');\n\n    if (token != null) {\n      result = this.sendToken(token);\n    } else {\n      result = false;\n    }\n\n    return result;\n  }\n\n  sendToken(token) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n      const options = {\n        headers: headers\n      };\n      return yield _this.http.get(environment.urlServerToken, options).toPromise().then(() => {\n        return true;\n      }).catch(() => {\n        return false;\n      });\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/tequinox/Descargas/Proyecto-Practises-/src/app/modules/Auth/Services/auth.service.ts"],"names":["HttpHeaders","environment","i0","i1","i2","AuthService","constructor","http","router","isValidToken","result","token","localStorage","getItem","sendToken","headers","options","get","urlServerToken","toPromise","then","catch","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDC,EAAAA,YAAY,GAAG;AACX,QAAIC,MAAJ;AACA,QAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AACA,QAAIF,KAAK,IAAI,IAAb,EAAmB;AACfD,MAAAA,MAAM,GAAG,KAAKI,SAAL,CAAeH,KAAf,CAAT;AACH,KAFD,MAGK;AACDD,MAAAA,MAAM,GAAG,KAAT;AACH;;AACD,WAAOA,MAAP;AACH;;AACKI,EAAAA,SAAS,CAACH,KAAD,EAAQ;AAAA;;AAAA;AACnB,YAAMI,OAAO,GAAG,IAAIf,WAAJ,CAAgB;AAC5B,wBAAgB,kBADY;AAE5B,yBAAkB,UAASW,KAAM;AAFL,OAAhB,CAAhB;AAIA,YAAMK,OAAO,GAAG;AACZD,QAAAA,OAAO,EAAEA;AADG,OAAhB;AAGA,mBAAa,KAAI,CAACR,IAAL,CAAUU,GAAV,CAAchB,WAAW,CAACiB,cAA1B,EAA0CF,OAA1C,EAAmDG,SAAnD,GACRC,IADQ,CACH,MAAM;AACZ,eAAO,IAAP;AACH,OAHY,EAIRC,KAJQ,CAIF,MAAM;AACb,eAAO,KAAP;AACH,OANY,CAAb;AARmB;AAetB;;AA/BoB;;AAiCzBhB,WAAW,CAACiB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAInB,WAAV,EAAuBH,EAAE,CAACuB,QAAH,CAAYtB,EAAE,CAACuB,UAAf,CAAvB,EAAmDxB,EAAE,CAACuB,QAAH,CAAYrB,EAAE,CAACuB,MAAf,CAAnD,CAAP;AAAoF,CAAzI;;AACAtB,WAAW,CAACuB,KAAZ,GAAoB,aAAc1B,EAAE,CAAC2B,kBAAH,CAAsB;AAAElB,EAAAA,KAAK,EAAEN,WAAT;AAAsByB,EAAAA,OAAO,EAAEzB,WAAW,CAACiB,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n    constructor(http, router) {\n        this.http = http;\n        this.router = router;\n    }\n    isValidToken() {\n        let result;\n        let token = localStorage.getItem('token');\n        if (token != null) {\n            result = this.sendToken(token);\n        }\n        else {\n            result = false;\n        }\n        return result;\n    }\n    async sendToken(token) {\n        const headers = new HttpHeaders({\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        });\n        const options = {\n            headers: headers\n        };\n        return await this.http.get(environment.urlServerToken, options).toPromise()\n            .then(() => {\n            return true;\n        })\n            .catch(() => {\n            return false;\n        });\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}