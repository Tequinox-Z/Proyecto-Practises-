{"ast":null,"code":"import _asyncToGenerator from \"/home/tequinox/Descargas/Proyecto-Practises-/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.SERVER_URL = 'http://localhost:8000/';\n  }\n\n  isValidToken() {\n    let token = localStorage.getItem('token') + '';\n\n    if (token == null) {\n      this.router.navigate(['welcome']);\n    }\n\n    return this.sendToken(token);\n  }\n\n  login(user) {\n    return this.http.post(this.SERVER_URL + \"auth/login\", user);\n  }\n\n  logout() {}\n\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  sendToken(token) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const options = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        })\n      };\n      return yield _this.http.get(_this.SERVER_URL + 'tokenCheck', options).toPromise().then(() => {\n        return true;\n      }).catch(() => {\n        localStorage.removeItem('token');\n\n        _this.router.navigate(['welcome']);\n\n        return false;\n      });\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/tequinox/Descargas/Proyecto-Practises-/src/app/modules/Auth/Services/auth.service.ts"],"names":["HttpHeaders","i0","i1","i2","AuthService","constructor","http","router","SERVER_URL","isValidToken","token","localStorage","getItem","navigate","sendToken","login","user","post","logout","setToken","setItem","getToken","options","headers","get","toPromise","then","catch","removeItem","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkB,wBAAlB;AACH;;AACDC,EAAAA,YAAY,GAAG;AACX,QAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgC,EAA5C;;AACA,QAAIF,KAAK,IAAI,IAAb,EAAmB;AACf,WAAKH,MAAL,CAAYM,QAAZ,CAAqB,CAAC,SAAD,CAArB;AACH;;AACD,WAAO,KAAKC,SAAL,CAAeJ,KAAf,CAAP;AACH;;AACDK,EAAAA,KAAK,CAACC,IAAD,EAAO;AACR,WAAO,KAAKV,IAAL,CAAUW,IAAV,CAAe,KAAKT,UAAL,GAAkB,YAAjC,EAA+CQ,IAA/C,CAAP;AACH;;AACDE,EAAAA,MAAM,GAAG,CACR;;AACDC,EAAAA,QAAQ,CAACT,KAAD,EAAQ;AACZC,IAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BV,KAA9B;AACH;;AACDW,EAAAA,QAAQ,GAAG;AACP,WAAOV,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAP;AACH;;AACKE,EAAAA,SAAS,CAACJ,KAAD,EAAQ;AAAA;;AAAA;AACnB,YAAMY,OAAO,GAAG;AACZC,QAAAA,OAAO,EAAE,IAAIvB,WAAJ,CAAgB;AACrB,0BAAgB,kBADK;AAErB,2BAAkB,UAASU,KAAM;AAFZ,SAAhB;AADG,OAAhB;AAMA,mBAAa,KAAI,CAACJ,IAAL,CAAUkB,GAAV,CAAc,KAAI,CAAChB,UAAL,GAAkB,YAAhC,EAA8Cc,OAA9C,EAAuDG,SAAvD,GACRC,IADQ,CACH,MAAM;AACZ,eAAO,IAAP;AACH,OAHY,EAIRC,KAJQ,CAIF,MAAM;AACbhB,QAAAA,YAAY,CAACiB,UAAb,CAAwB,OAAxB;;AACA,QAAA,KAAI,CAACrB,MAAL,CAAYM,QAAZ,CAAqB,CAAC,SAAD,CAArB;;AACA,eAAO,KAAP;AACH,OARY,CAAb;AAPmB;AAgBtB;;AAxCoB;;AA0CzBT,WAAW,CAACyB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI3B,WAAV,EAAuBH,EAAE,CAAC+B,QAAH,CAAY9B,EAAE,CAAC+B,UAAf,CAAvB,EAAmDhC,EAAE,CAAC+B,QAAH,CAAY7B,EAAE,CAAC+B,MAAf,CAAnD,CAAP;AAAoF,CAAzI;;AACA9B,WAAW,CAAC+B,KAAZ,GAAoB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAE1B,EAAAA,KAAK,EAAEN,WAAT;AAAsBiC,EAAAA,OAAO,EAAEjC,WAAW,CAACyB,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n    constructor(http, router) {\n        this.http = http;\n        this.router = router;\n        this.SERVER_URL = 'http://localhost:8000/';\n    }\n    isValidToken() {\n        let token = localStorage.getItem('token') + '';\n        if (token == null) {\n            this.router.navigate(['welcome']);\n        }\n        return this.sendToken(token);\n    }\n    login(user) {\n        return this.http.post(this.SERVER_URL + \"auth/login\", user);\n    }\n    logout() {\n    }\n    setToken(token) {\n        localStorage.setItem('token', token);\n    }\n    getToken() {\n        return localStorage.getItem('token');\n    }\n    async sendToken(token) {\n        const options = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            })\n        };\n        return await this.http.get(this.SERVER_URL + 'tokenCheck', options).toPromise()\n            .then(() => {\n            return true;\n        })\n            .catch(() => {\n            localStorage.removeItem('token');\n            this.router.navigate(['welcome']);\n            return false;\n        });\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}