{
  "version": 3,
  "file": "stanvanheumen-ngx-storage.umd.min.js",
  "sources": [
    "ng://@stanvanheumen/ngx-storage/out/src/storage.service.ts",
    "ng://@stanvanheumen/ngx-storage/out/src/storage.module.ts"
  ],
  "sourcesContent": [
    "import {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {_throw} from 'rxjs/observable/throw';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Injectable} from '@angular/core';\r\n\r\ninterface StorageState {\r\n    [key: string]: BehaviorSubject<any>;\r\n}\r\n\r\n@Injectable()\r\nexport class StorageService {\r\n\r\n    // The localStorage (only available in the browser).\r\n    private readonly storage: Storage | null =\r\n        (typeof window !== 'undefined' && window.hasOwnProperty('localStorage'))\r\n            ? window.localStorage\r\n            : null;\r\n\r\n    // The state containing the observables.\r\n    private state: StorageState = {};\r\n\r\n    // Warn function.\r\n    private warn = (text: string) => {\r\n        if (console && console.warn) {\r\n            console.warn(text);\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        // Warn the user once if the local storage is not available on the current platform.\r\n        if (!this.isStorageAvailable) {\r\n            this.warn('The local storage is not available on this platform.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the value associated to the specified token wrapped in an observable stream\r\n     * that will get updated each time the user sets a new value in the storage.\r\n     * If the storage is not available an in-memory solution will be used.\r\n     *\r\n     * @param token The token that is associated to a given value.\r\n     *\r\n     * @returns An observable of type T or null.\r\n     */\r\n    get<T = any>(token: string): Observable<T | null> {\r\n        // Check if the storage is already in the state; if so, return the subject.\r\n        if (this.state[token]) {\r\n            return this.state[token];\r\n        }\r\n\r\n        // Get the data from the local storage, if the storage is available.\r\n        let rawData = null;\r\n        if (this.isStorageAvailable) {\r\n            rawData = this.storage.getItem(token);\r\n        }\r\n\r\n        // Try to parse the data.\r\n        let parsedData: T | null = null;\r\n\r\n        // Only parse the data when it is not null.\r\n        if (rawData !== null) {\r\n            try {\r\n                parsedData = JSON.parse(rawData);\r\n            } catch (error) {\r\n                return _throw(\r\n                    new Error('The raw data cannot be parsed; Invalid data in the storage.')\r\n                );\r\n            }\r\n        }\r\n\r\n        // Add the parsed data to the state as an observable.\r\n        this.state[token] = new BehaviorSubject<T>(parsedData);\r\n\r\n        // Return the observable.\r\n        return this.state[token];\r\n    }\r\n\r\n    /**\r\n     * Associates a value to the specified token. This method updates all subscribers to the observable\r\n     * that is in the state.\r\n     *\r\n     * @param token The token that is associated with the given value.\r\n     * @param data The value that will be set in the storage.\r\n     */\r\n    set<T = any>(token: string, data: T): void {\r\n        // Stringify the data.\r\n        const rawData = JSON.stringify(data);\r\n\r\n        // Set the item in the storage.\r\n        if (this.isStorageAvailable) {\r\n            this.storage.setItem(token, rawData);\r\n        }\r\n\r\n        // Check if the state does not exist.\r\n        if (!this.state[token]) {\r\n            return;\r\n        }\r\n\r\n        // Check if the current and next values are not equal.\r\n        const current = JSON.stringify(this.state[token].getValue());\r\n        if (current === rawData) {\r\n            return;\r\n        }\r\n\r\n        // Push the new data.\r\n        this.state[token].next(data);\r\n    }\r\n\r\n    /**\r\n     * Removes the value associated to the specified token. This method updates all subscribers to the observable\r\n     * that is in the state.\r\n     *\r\n     * @param token The token that is associated to a given value.\r\n     */\r\n    remove(token: string): void {\r\n        // Remove the item from the storage (if the storage exists).\r\n        if (this.isStorageAvailable) {\r\n            this.storage.removeItem(token);\r\n        }\r\n\r\n        // Check if the storage state exists.\r\n        if (!this.state[token]) {\r\n            return;\r\n        }\r\n\r\n        // Check if the current and next values are not equal.\r\n        const current = this.state[token].getValue();\r\n        const next = null;\r\n        if (current === next) {\r\n            return;\r\n        }\r\n\r\n        // Set the state to null.\r\n        this.state[token].next(next);\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value pairs from the storage. This method updates all subscribers to all observables\r\n     * that are in the state.\r\n     */\r\n    clear(): void {\r\n        // Do a local storage clear (if the storage exists).\r\n        if (this.isStorageAvailable) {\r\n            this.storage.clear();\r\n        }\r\n\r\n        // Set all states to null.\r\n        Object.keys(this.state).forEach(key => {\r\n            // Check if the current and next values are not equal.\r\n            const current = this.state[key].getValue();\r\n            const next = null;\r\n            if (current === next) {\r\n                return;\r\n            }\r\n\r\n            // Only emit if the values are not equal.\r\n            this.state[key].next(next);\r\n        });\r\n    }\r\n\r\n    private get isStorageAvailable() {\r\n        return !!this.storage;\r\n    }\r\n\r\n}\r\n",
    "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {StorageService} from './storage.service';\r\n\r\n@NgModule({\r\n    providers: [StorageService]\r\n})\r\nexport class NgxStorageModule {\r\n}\r\n"
  ],
  "names": [
    "StorageService",
    "this",
    "storage",
    "window",
    "hasOwnProperty",
    "localStorage",
    "state",
    "warn",
    "text",
    "console",
    "isStorageAvailable",
    "prototype",
    "get",
    "token",
    "rawData",
    "getItem",
    "parsedData",
    "JSON",
    "parse",
    "error",
    "_throw",
    "Error",
    "BehaviorSubject",
    "set",
    "data",
    "stringify",
    "setItem",
    "getValue",
    "next",
    "remove",
    "removeItem",
    "clear",
    "_this",
    "Object",
    "keys",
    "forEach",
    "key",
    "defineProperty",
    "type",
    "Injectable",
    "NgxStorageModule",
    "NgModule",
    "args",
    "providers"
  ],
  "mappings": "mbAUA,IAAAA,EAAA,WAkBI,SAAJA,IAdAC,KAAAC,QAA2B,oBAAXC,QAA0BA,OAAOC,eAAe,gBAClDD,OAAOE,aACP,KAGdJ,KAAAK,SAGAL,KAAAM,KAAmB,SAACC,GACRC,SAAWA,QAAQF,MACnBE,QAAQF,KAAKC,IAMZP,KAAKS,oBACNT,KAAKM,KAAK,+DAalBP,EAAJW,UAAAC,IAAI,SAAaC,GAET,GAAIZ,KAAKK,MAAMO,GACX,OAAOZ,KAAKK,MAAMO,GAItB,IAAIC,EAAU,KACVb,KAAKS,qBACLI,EAAUb,KAAKC,QAAQa,QAAQF,IAInC,IAAIG,EAAuB,KAG3B,GAAgB,OAAZF,EACA,IACIE,EAAaC,KAAKC,MAAMJ,GAC1B,MAAOK,GACL,OAAOC,EAAAA,OACH,IAAIC,MAAM,gEAStB,OAHApB,KAAKK,MAAMO,GAAS,IAAIS,EAAAA,gBAAmBN,GAGpCf,KAAKK,MAAMO,IAUtBb,EAAJW,UAAAY,IAAI,SAAaV,EAAeW,GAExB,IAAMV,EAAUG,KAAKQ,UAAUD,IAG3BvB,KAAKS,oBACLT,KAAKC,QAAQwB,QAAQb,EAAOC,GAI3Bb,KAAKK,MAAMO,MAKAI,KAAKQ,UAAUxB,KAAKK,MAAMO,GAAOc,cACjCb,GAKhBb,KAAKK,MAAMO,GAAOe,KAAKJ,KAS3BxB,EAAJW,UAAAkB,OAAI,SAAOhB,GAOH,GALIZ,KAAKS,oBACLT,KAAKC,QAAQ4B,WAAWjB,GAIvBZ,KAAKK,MAAMO,GAAhB,CAMa,OADGZ,KAAKK,MAAMO,GAAOc,YAOlC1B,KAAKK,MAAMO,GAAOe,KANL,QAajB5B,EAAJW,UAAAoB,MAAI,WAAA,IAAJC,EAAA/B,KAEYA,KAAKS,oBACLT,KAAKC,QAAQ6B,QAIjBE,OAAOC,KAAKjC,KAAKK,OAAO6B,QAAQ,SAAAC,GAGf,OADGJ,EAAK1B,MAAM8B,GAAKT,YAOhCK,EAAK1B,MAAM8B,GAAKR,KANH,SAUzBK,OAAAI,eAAgBrC,EAAhBW,UAAA,sBAAAC,IAAA,WACQ,QAASX,KAAKC,2CAvJtB,kBADAoC,KAACC,EAAAA,mDCDD,IAAAC,EAAA,4BAHAF,KAACG,EAAAA,SAADC,OACIC,WAAY3C"
}
