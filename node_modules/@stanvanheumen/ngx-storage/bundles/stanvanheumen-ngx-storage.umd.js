(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/BehaviorSubject'), require('rxjs/observable/throw'), require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', 'rxjs/BehaviorSubject', 'rxjs/observable/throw', '@angular/core'], factory) :
	(factory((global.stanvanheumen = global.stanvanheumen || {}, global.stanvanheumen['ngx-storage'] = {}),global.Rx,global.Rx.Observable,global.ng.core));
}(this, (function (exports,BehaviorSubject,_throw,core) { 'use strict';

var StorageService =               (function () {
    function StorageService() {
        this.storage = (typeof window !== 'undefined' && window.hasOwnProperty('localStorage'))
            ? window.localStorage
            : null;
        this.state = {};
        this.warn = function (text) {
            if (console && console.warn) {
                console.warn(text);
            }
        };
        if (!this.isStorageAvailable) {
            this.warn('The local storage is not available on this platform.');
        }
    }
    StorageService.prototype.get = function (token) {
        if (this.state[token]) {
            return this.state[token];
        }
        var rawData = null;
        if (this.isStorageAvailable) {
            rawData = this.storage.getItem(token);
        }
        var parsedData = null;
        if (rawData !== null) {
            try {
                parsedData = JSON.parse(rawData);
            }
            catch (error) {
                return _throw._throw(new Error('The raw data cannot be parsed; Invalid data in the storage.'));
            }
        }
        this.state[token] = new BehaviorSubject.BehaviorSubject(parsedData);
        return this.state[token];
    };
    StorageService.prototype.set = function (token, data) {
        var rawData = JSON.stringify(data);
        if (this.isStorageAvailable) {
            this.storage.setItem(token, rawData);
        }
        if (!this.state[token]) {
            return;
        }
        var current = JSON.stringify(this.state[token].getValue());
        if (current === rawData) {
            return;
        }
        this.state[token].next(data);
    };
    StorageService.prototype.remove = function (token) {
        if (this.isStorageAvailable) {
            this.storage.removeItem(token);
        }
        if (!this.state[token]) {
            return;
        }
        var current = this.state[token].getValue();
        var next = null;
        if (current === next) {
            return;
        }
        this.state[token].next(next);
    };
    StorageService.prototype.clear = function () {
        var _this = this;
        if (this.isStorageAvailable) {
            this.storage.clear();
        }
        Object.keys(this.state).forEach(function (key) {
            var current = _this.state[key].getValue();
            var next = null;
            if (current === next) {
                return;
            }
            _this.state[key].next(next);
        });
    };
    Object.defineProperty(StorageService.prototype, "isStorageAvailable", {
        get: function () {
            return !!this.storage;
        },
        enumerable: true,
        configurable: true
    });
    return StorageService;
}());
StorageService.decorators = [
    { type: core.Injectable },
];
StorageService.ctorParameters = function () { return []; };
var NgxStorageModule =               (function () {
    function NgxStorageModule() {
    }
    return NgxStorageModule;
}());
NgxStorageModule.decorators = [
    { type: core.NgModule, args: [{
                providers: [StorageService]
            },] },
];
NgxStorageModule.ctorParameters = function () { return []; };

exports.NgxStorageModule = NgxStorageModule;
exports.StorageService = StorageService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=stanvanheumen-ngx-storage.umd.js.map
