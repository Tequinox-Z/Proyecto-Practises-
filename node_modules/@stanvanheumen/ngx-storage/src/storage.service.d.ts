import { Observable } from 'rxjs/Observable';
export declare class StorageService {
    private readonly storage;
    private state;
    private warn;
    constructor();
    /**
     * Returns the value associated to the specified token wrapped in an observable stream
     * that will get updated each time the user sets a new value in the storage.
     * If the storage is not available an in-memory solution will be used.
     *
     * @param token The token that is associated to a given value.
     *
     * @returns An observable of type T or null.
     */
    get<T = any>(token: string): Observable<T | null>;
    /**
     * Associates a value to the specified token. This method updates all subscribers to the observable
     * that is in the state.
     *
     * @param token The token that is associated with the given value.
     * @param data The value that will be set in the storage.
     */
    set<T = any>(token: string, data: T): void;
    /**
     * Removes the value associated to the specified token. This method updates all subscribers to the observable
     * that is in the state.
     *
     * @param token The token that is associated to a given value.
     */
    remove(token: string): void;
    /**
     * Removes all key-value pairs from the storage. This method updates all subscribers to all observables
     * that are in the state.
     */
    clear(): void;
    private readonly isStorageAvailable;
}
