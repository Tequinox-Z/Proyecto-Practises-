{
  "version": 3,
  "file": "stanvanheumen-ngx-storage.js",
  "sources": [
    "ng://@stanvanheumen/ngx-storage/out/src/storage.module.ts",
    "ng://@stanvanheumen/ngx-storage/out/src/storage.service.ts"
  ],
  "sourcesContent": [
    "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport {StorageService} from './storage.service';\r\n\r\n@NgModule({\r\n    providers: [StorageService]\r\n})\r\nexport class NgxStorageModule {\r\n}\r\n",
    "import {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {_throw} from 'rxjs/observable/throw';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Injectable} from '@angular/core';\r\n\r\ninterface StorageState {\r\n    [key: string]: BehaviorSubject<any>;\r\n}\r\n\r\n@Injectable()\r\nexport class StorageService {\r\n\r\n    // The localStorage (only available in the browser).\r\n    private readonly storage: Storage | null =\r\n        (typeof window !== 'undefined' && window.hasOwnProperty('localStorage'))\r\n            ? window.localStorage\r\n            : null;\r\n\r\n    // The state containing the observables.\r\n    private state: StorageState = {};\r\n\r\n    // Warn function.\r\n    private warn = (text: string) => {\r\n        if (console && console.warn) {\r\n            console.warn(text);\r\n        }\r\n    };\r\n\r\n    constructor() {\r\n        // Warn the user once if the local storage is not available on the current platform.\r\n        if (!this.isStorageAvailable) {\r\n            this.warn('The local storage is not available on this platform.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the value associated to the specified token wrapped in an observable stream\r\n     * that will get updated each time the user sets a new value in the storage.\r\n     * If the storage is not available an in-memory solution will be used.\r\n     *\r\n     * @param token The token that is associated to a given value.\r\n     *\r\n     * @returns An observable of type T or null.\r\n     */\r\n    get<T = any>(token: string): Observable<T | null> {\r\n        // Check if the storage is already in the state; if so, return the subject.\r\n        if (this.state[token]) {\r\n            return this.state[token];\r\n        }\r\n\r\n        // Get the data from the local storage, if the storage is available.\r\n        let rawData = null;\r\n        if (this.isStorageAvailable) {\r\n            rawData = this.storage.getItem(token);\r\n        }\r\n\r\n        // Try to parse the data.\r\n        let parsedData: T | null = null;\r\n\r\n        // Only parse the data when it is not null.\r\n        if (rawData !== null) {\r\n            try {\r\n                parsedData = JSON.parse(rawData);\r\n            } catch (error) {\r\n                return _throw(\r\n                    new Error('The raw data cannot be parsed; Invalid data in the storage.')\r\n                );\r\n            }\r\n        }\r\n\r\n        // Add the parsed data to the state as an observable.\r\n        this.state[token] = new BehaviorSubject<T>(parsedData);\r\n\r\n        // Return the observable.\r\n        return this.state[token];\r\n    }\r\n\r\n    /**\r\n     * Associates a value to the specified token. This method updates all subscribers to the observable\r\n     * that is in the state.\r\n     *\r\n     * @param token The token that is associated with the given value.\r\n     * @param data The value that will be set in the storage.\r\n     */\r\n    set<T = any>(token: string, data: T): void {\r\n        // Stringify the data.\r\n        const rawData = JSON.stringify(data);\r\n\r\n        // Set the item in the storage.\r\n        if (this.isStorageAvailable) {\r\n            this.storage.setItem(token, rawData);\r\n        }\r\n\r\n        // Check if the state does not exist.\r\n        if (!this.state[token]) {\r\n            return;\r\n        }\r\n\r\n        // Check if the current and next values are not equal.\r\n        const current = JSON.stringify(this.state[token].getValue());\r\n        if (current === rawData) {\r\n            return;\r\n        }\r\n\r\n        // Push the new data.\r\n        this.state[token].next(data);\r\n    }\r\n\r\n    /**\r\n     * Removes the value associated to the specified token. This method updates all subscribers to the observable\r\n     * that is in the state.\r\n     *\r\n     * @param token The token that is associated to a given value.\r\n     */\r\n    remove(token: string): void {\r\n        // Remove the item from the storage (if the storage exists).\r\n        if (this.isStorageAvailable) {\r\n            this.storage.removeItem(token);\r\n        }\r\n\r\n        // Check if the storage state exists.\r\n        if (!this.state[token]) {\r\n            return;\r\n        }\r\n\r\n        // Check if the current and next values are not equal.\r\n        const current = this.state[token].getValue();\r\n        const next = null;\r\n        if (current === next) {\r\n            return;\r\n        }\r\n\r\n        // Set the state to null.\r\n        this.state[token].next(next);\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value pairs from the storage. This method updates all subscribers to all observables\r\n     * that are in the state.\r\n     */\r\n    clear(): void {\r\n        // Do a local storage clear (if the storage exists).\r\n        if (this.isStorageAvailable) {\r\n            this.storage.clear();\r\n        }\r\n\r\n        // Set all states to null.\r\n        Object.keys(this.state).forEach(key => {\r\n            // Check if the current and next values are not equal.\r\n            const current = this.state[key].getValue();\r\n            const next = null;\r\n            if (current === next) {\r\n                return;\r\n            }\r\n\r\n            // Only emit if the values are not equal.\r\n            this.state[key].next(next);\r\n        });\r\n    }\r\n\r\n    private get isStorageAvailable() {\r\n        return !!this.storage;\r\n    }\r\n\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
