import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { _throw } from 'rxjs/observable/throw';
import { Injectable, NgModule } from '@angular/core';

class StorageService {
    constructor() {
        this.storage = (typeof window !== 'undefined' && window.hasOwnProperty('localStorage'))
            ? window.localStorage
            : null;
        this.state = {};
        this.warn = (text) => {
            if (console && console.warn) {
                console.warn(text);
            }
        };
        if (!this.isStorageAvailable) {
            this.warn('The local storage is not available on this platform.');
        }
    }
    get(token) {
        if (this.state[token]) {
            return this.state[token];
        }
        let                  rawData = null;
        if (this.isStorageAvailable) {
            rawData = this.storage.getItem(token);
        }
        let                  parsedData = null;
        if (rawData !== null) {
            try {
                parsedData = JSON.parse(rawData);
            }
            catch (                 error) {
                return _throw(new Error('The raw data cannot be parsed; Invalid data in the storage.'));
            }
        }
        this.state[token] = new BehaviorSubject(parsedData);
        return this.state[token];
    }
    set(token, data) {
        const                  rawData = JSON.stringify(data);
        if (this.isStorageAvailable) {
            this.storage.setItem(token, rawData);
        }
        if (!this.state[token]) {
            return;
        }
        const                  current = JSON.stringify(this.state[token].getValue());
        if (current === rawData) {
            return;
        }
        this.state[token].next(data);
    }
    remove(token) {
        if (this.isStorageAvailable) {
            this.storage.removeItem(token);
        }
        if (!this.state[token]) {
            return;
        }
        const                  current = this.state[token].getValue();
        const                  next = null;
        if (current === next) {
            return;
        }
        this.state[token].next(next);
    }
    clear() {
        if (this.isStorageAvailable) {
            this.storage.clear();
        }
        Object.keys(this.state).forEach(key => {
            const                  current = this.state[key].getValue();
            const                  next = null;
            if (current === next) {
                return;
            }
            this.state[key].next(next);
        });
    }
    get isStorageAvailable() {
        return !!this.storage;
    }
}
StorageService.decorators = [
    { type: Injectable },
];
StorageService.ctorParameters = () => [];

class NgxStorageModule {
}
NgxStorageModule.decorators = [
    { type: NgModule, args: [{
                providers: [StorageService]
            },] },
];
NgxStorageModule.ctorParameters = () => [];

export { NgxStorageModule, StorageService };
//# sourceMappingURL=stanvanheumen-ngx-storage.js.map
