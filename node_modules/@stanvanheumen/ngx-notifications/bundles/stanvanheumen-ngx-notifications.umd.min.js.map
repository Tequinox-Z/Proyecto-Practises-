{
  "version": 3,
  "file": "stanvanheumen-ngx-notifications.umd.min.js",
  "sources": [
    "ng://@stanvanheumen/ngx-notifications/out/src/notifications.interface.ts",
    "ng://@stanvanheumen/ngx-notifications/out/src/notifications.service.ts",
    "ng://@stanvanheumen/ngx-notifications/out/src/notifications-list/notifications-list.component.ts",
    "ng://@stanvanheumen/ngx-notifications/out/src/notifications-item/notifications-item.component.ts",
    "ng://@stanvanheumen/ngx-notifications/out/src/notifications.module.ts"
  ],
  "sourcesContent": [
    "import {Translation} from '@stanvanheumen/ngx-translations';\r\n\r\nexport interface Notification {\r\n\r\n    /**\r\n     * The identifier of the notification.\r\n     */\r\n    id?: string;\r\n\r\n    /**\r\n     * An optional title for the notification (if not set, a default will be picked).\r\n     */\r\n    title?: string | Translation;\r\n\r\n    /**\r\n     * The text for the notification.\r\n     */\r\n    text: string | Translation;\r\n\r\n    /**\r\n     * The type of the notification.\r\n     */\r\n    type: NotificationType;\r\n\r\n    /**\r\n     * An optional amount of milliseconds before the notification should disappear (if not set, a default will be picked).\r\n     */\r\n    timeout?: number;\r\n\r\n    /**\r\n     * If the notification should be closable; Default is true.\r\n     */\r\n    closable?: boolean;\r\n\r\n    /**\r\n     * An optional icon for the notification (if not set, a default will be picked).\r\n     */\r\n    icon?: string;\r\n\r\n}\r\n\r\nexport enum NotificationType {\r\n    Success = 'success',\r\n    Error = 'error',\r\n    Warning = 'warning',\r\n    Info = 'info'\r\n}\r\n\r\nexport class NotificationOptions {\r\n    timeout?: number;\r\n\r\n    closable?: boolean;\r\n\r\n    titles?: {\r\n        success?: string;\r\n        error?: string;\r\n        warning?: string;\r\n        info?: string;\r\n    };\r\n\r\n    icons?: {\r\n        success?: string;\r\n        error?: string;\r\n        warning?: string;\r\n        info?: string;\r\n    };\r\n}\r\n",
    "import {Notification, NotificationOptions, NotificationType} from './notifications.interface';\r\nimport {Translation} from '@stanvanheumen/ngx-translations';\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport {Injectable, Optional} from '@angular/core';\r\n\r\n@Injectable()\r\nexport class NotificationsService {\r\n\r\n    private readonly defaultTitles = {\r\n        [NotificationType.Success]: 'Action was successful',\r\n        [NotificationType.Error]: 'Action did fail',\r\n        [NotificationType.Warning]: 'Warning',\r\n        [NotificationType.Info]: 'Information'\r\n    };\r\n\r\n    private readonly defaultIcons = {\r\n        [NotificationType.Success]: 'check_circle',\r\n        [NotificationType.Error]: 'error_outline',\r\n        [NotificationType.Warning]: 'error_outline',\r\n        [NotificationType.Info]: 'info_outline'\r\n    };\r\n\r\n    private readonly defaultTimeout: number = 4000;\r\n    private readonly defaultClosable: boolean = true;\r\n\r\n    private list$ = new BehaviorSubject<Notification[]>([]);\r\n\r\n    constructor(@Optional() private options: NotificationOptions) {\r\n        if (!options) {\r\n            throw new Error('No NotificationOptions were received.');\r\n        }\r\n        this.defaultTimeout = options.timeout === undefined ? this.defaultTimeout : options.timeout;\r\n        this.defaultClosable = options.closable === undefined ? this.defaultClosable : options.closable;\r\n        this.defaultTitles = Object.assign(this.defaultTitles, options.titles || {});\r\n        this.defaultIcons = Object.assign(this.defaultIcons, options.icons || {});\r\n    }\r\n\r\n    get items() {\r\n        return this.list$;\r\n    }\r\n\r\n    success(text: string | Translation, timeout = this.defaultTimeout) {\r\n        this.create({text, timeout, type: NotificationType.Success});\r\n    }\r\n\r\n    error(text: string | Translation, timeout = this.defaultTimeout) {\r\n        this.create({text, timeout, type: NotificationType.Error});\r\n    }\r\n\r\n    warn(text: string | Translation, timeout = this.defaultTimeout) {\r\n        this.create({text, timeout, type: NotificationType.Warning});\r\n    }\r\n\r\n    info(text: string | Translation, timeout = this.defaultTimeout) {\r\n        this.create({text, timeout, type: NotificationType.Info});\r\n    }\r\n\r\n    create(notification: Notification) {\r\n        // Compose a new notification item.\r\n        const item = this.compose(notification);\r\n\r\n        // Add the notification to the list.\r\n        this.push(item);\r\n    }\r\n\r\n    transform(callback: (notifications: Notification[]) => Notification[]) {\r\n        const oldNotifications = this.list$.getValue();\r\n        const newNotifications = callback(oldNotifications);\r\n        this.list$.next(newNotifications);\r\n    }\r\n\r\n    delete(notification: Notification) {\r\n        return this.pull(notification);\r\n    }\r\n\r\n    private push(notification: Notification) {\r\n        // Get the current list.\r\n        const list = this.list$.getValue();\r\n\r\n        // Add the notification to the list.\r\n        list.push(notification);\r\n\r\n        // Push a new list.\r\n        this.list$.next(list);\r\n    }\r\n\r\n    private pull(notification: Notification) {\r\n        // Get the current list.\r\n        const list = this.list$.getValue();\r\n\r\n        // Remove the notifications with matching id's.\r\n        list.forEach((item, index) => {\r\n            if (item.id === notification.id) {\r\n                list.splice(index, 1);\r\n            }\r\n        });\r\n\r\n        // Push a new list.\r\n        this.list$.next(list);\r\n    }\r\n\r\n    private compose(notification: Notification) {\r\n        // Attach a random id to the notification.\r\n        notification.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        // Set the default to true if none is set.\r\n        notification.closable = notification.closable !== undefined ? notification.closable : this.defaultClosable;\r\n\r\n        // Set a default title if none is set.\r\n        notification.title = notification.title || this.defaultTitles[notification.type];\r\n\r\n        // Set a default icon if none is set.\r\n        notification.icon = notification.icon || this.defaultIcons[notification.type];\r\n\r\n        // Set a default timeout if none is set.\r\n        notification.timeout = notification.timeout !== undefined ? notification.timeout : this.defaultTimeout;\r\n\r\n        // Return the composed notification.\r\n        return notification;\r\n    }\r\n\r\n}\r\n",
    "import {trigger, animate, style, transition, query, stagger, keyframes} from '@angular/animations';\r\nimport {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\r\nimport {NotificationsService} from '../notifications.service';\r\nimport {Notification} from '../notifications.interface';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\n@Component({\r\n    selector: 'ngx-notifications-list',\r\n    template: `<div *ngIf=\"notifications$ | async as notifications\" class=\"ngx-notifications-wrapper\">\r\n    <div [@listAnimation]=\"notifications.length\" class=\"ngx-notifications-list\">\r\n        <div *ngFor=\"let notification of notifications; trackBy: trackById\" class=\"ngx-notifications-item\">\r\n            <ngx-notifications-item [notification]=\"notification\"\r\n                                    (onDestroy)=\"onNotificationDestroy($event)\"></ngx-notifications-item>\r\n        </div>\r\n    </div>\r\n</div>`,\r\n    styles: [`.ngx-notifications-wrapper{\n  top:0;\n  left:0;\n  right:0;\n  bottom:0;\n  z-index:400;\n  position:fixed;\n  pointer-events:none; }\n\n.ngx-notifications-list{\n  padding:0;\n  width:100%;\n  display:block;\n  max-width:420px;\n  margin-left:auto;\n  position:relative; }\n\n.ngx-notifications-item{\n  margin:0;\n  padding:0;\n  pointer-events:all; }\n`],\r\n    animations: [trigger('listAnimation', [\r\n        transition('* => *', [\r\n            query(':enter', style({opacity: 0}), {optional: true}),\r\n            query(':enter', stagger('500ms', [\r\n                animate('500ms cubic-bezier(0, 0, .2, 1)', keyframes([\r\n                    style({opacity: 0, transform: 'translateX(50%)', offset: 0}),\r\n                    style({opacity: 1, transform: 'translateX(0)', offset: 1.0})\r\n                ]))\r\n            ]), {optional: true}),\r\n            query(':leave', stagger('500ms', [\r\n                animate('500ms cubic-bezier(0, 0, .2, 1)', keyframes([\r\n                    style({height: '*', opacity: 1, transform: 'translateX(0)', offset: 0}),\r\n                    style({height: '*', opacity: 0, transform: 'translateX(-25%)', offset: 0.9}),\r\n                    style({height: 0, opacity: 0, transform: 'translateX(-25%)', offset: 1.0})\r\n                ]))\r\n            ]), {optional: true})\r\n        ])\r\n    ])],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    preserveWhitespaces: false\r\n})\r\nexport class NgxNotificationsListComponent implements OnInit {\r\n\r\n    notifications$: Observable<Notification[]>;\r\n\r\n    trackById = (index: number, item: Notification) => {\r\n        return item.id;\r\n    };\r\n\r\n    constructor(private notifications: NotificationsService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.notifications$ = this.notifications.items;\r\n    }\r\n\r\n    onNotificationDestroy(notification: Notification) {\r\n        this.notifications.delete(notification);\r\n    }\r\n\r\n}\r\n",
    "import {\r\n    ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, NgZone, OnDestroy, OnInit,\r\n    Output\r\n} from '@angular/core';\r\nimport {Notification} from '../notifications.interface';\r\n\r\n@Component({\r\n    selector: 'ngx-notifications-item',\r\n    template: `<div [ngClass]=\"notificationClasses\"\r\n     class=\"ngx-notification\">\r\n    <i class=\"material-icons ngx-notification-icon\">{{ notification.icon }}</i>\r\n\r\n    <div class=\"ngx-notification-data\">\r\n        <h1 class=\"ngx-notification-title\">{{ notification.title | translate }}</h1>\r\n        <p class=\"ngx-notification-text\">{{ notification.text | translate }}</p>\r\n    </div>\r\n\r\n    <div *ngIf=\"notification.closable\"\r\n         (click)=\"onDestroy.emit(notification)\"\r\n         class=\"ngx-notification-clear\">\r\n        <i class=\"material-icons\">clear</i>\r\n    </div>\r\n\r\n    <div *ngIf=\"notification.timeout > 0\"\r\n         [ngClass]=\"progressBarClasses\"\r\n         [style.width]=\"progressWidth\"\r\n         class=\"ngx-notification-progress\"></div>\r\n</div>`,\r\n    styles: [`.ngx-notification-icon{\n  margin-right:10px; }\n\n.ngx-notification-data{\n  width:100%; }\n\n.ngx-notification-title{\n  display:block;\n  font-size:16px;\n  max-width:100%;\n  overflow:hidden;\n  line-height:1.5;\n  white-space:nowrap;\n  margin:0 30px 4px 0;\n  text-overflow:ellipsis; }\n\n.ngx-notification-text{\n  margin:0;\n  line-height:1.3;\n  color:rgba(255, 255, 255, 0.6); }\n\n.ngx-notification{\n  color:white;\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex;\n  font-weight:500;\n  -webkit-user-select:none;\n     -moz-user-select:none;\n      -ms-user-select:none;\n          user-select:none;\n  position:relative;\n  border-radius:4px;\n  margin:10px 10px 0;\n  padding:10px 10px 14px;\n  -webkit-box-pack:center;\n      -ms-flex-pack:center;\n          justify-content:center;\n  font-family:'Roboto', sans-serif;\n  -webkit-box-shadow:0 1px 2px rgba(0, 0, 0, 0.2);\n          box-shadow:0 1px 2px rgba(0, 0, 0, 0.2); }\n  .ngx-notification--success{\n    background-color:#43a047;\n    border-left:4px solid #295f2d; }\n  .ngx-notification--error{\n    background-color:#be2c2c;\n    border-left:4px solid #7e2020; }\n  .ngx-notification--warning{\n    background-color:#f57f17;\n    border-left:4px solid #ac7a26; }\n    .ngx-notification--warning .ngx-notification-text{\n      color:rgba(0, 0, 0, 0.6); }\n  .ngx-notification--info{\n    background-color:#5e35b1;\n    border-left:4px solid #191b1f; }\n\n.ngx-notification-clear{\n  top:0;\n  right:0;\n  width:30px;\n  height:30px;\n  margin:5px;\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex;\n  cursor:pointer;\n  position:absolute;\n  border-radius:4px;\n  -webkit-box-align:center;\n      -ms-flex-align:center;\n          align-items:center;\n  -webkit-box-pack:center;\n      -ms-flex-pack:center;\n          justify-content:center;\n  -webkit-transition:background-color 200ms cubic-bezier(0, 0, 0.2, 1);\n  transition:background-color 200ms cubic-bezier(0, 0, 0.2, 1); }\n  .ngx-notification-clear:hover{\n    background-color:rgba(0, 0, 0, 0.15); }\n  .ngx-notification-clear:active{\n    background-color:rgba(0, 0, 0, 0.25); }\n\n.ngx-notification-progress{\n  left:0;\n  bottom:0;\n  height:4px;\n  position:absolute;\n  background-color:rgba(0, 0, 0, 0.2); }\n  .ngx-notification-progress--success{\n    background-color:#295f2d; }\n  .ngx-notification-progress--error{\n    background-color:#7e2020; }\n  .ngx-notification-progress--warning{\n    background-color:#ac7a26; }\n  .ngx-notification-progress--info{\n    background-color:#191b1f; }\n`],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    preserveWhitespaces: false\r\n})\r\nexport class NgxNotificationsItemComponent implements OnInit, OnDestroy {\r\n\r\n    // Input.\r\n    @Input() notification: Notification;\r\n\r\n    // Output.\r\n    @Output() onDestroy = new EventEmitter<Notification>();\r\n\r\n    // Data.\r\n    private progress = 0;\r\n    private count = 0;\r\n\r\n    // Helper variables.\r\n    private steps: number;\r\n    private speed: number;\r\n    private timer: number;\r\n    private startTime: number;\r\n    private difference: number;\r\n\r\n    constructor(private zone: NgZone,\r\n                private changeDetection: ChangeDetectorRef) {\r\n    }\r\n\r\n    get progressWidth() {\r\n        return Math.min(this.progress, 100) + '%';\r\n    }\r\n\r\n    get notificationClasses() {\r\n        return {\r\n            ['ngx-notification--' + this.notification.type]: true\r\n        };\r\n    }\r\n\r\n    get progressBarClasses() {\r\n        return {\r\n            ['ngx-notification-progress--' + this.notification.type]: true\r\n        };\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Check if the notification timeout is not 0 and the platform is a browser.\r\n        if (this.notification.timeout <= 0 || setTimeout === undefined) {\r\n            this.notification.closable = true;\r\n            return;\r\n        }\r\n\r\n        // Start the timeout.\r\n        this.startTimeout();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // Check if clearTimeout exists.\r\n        if (this.notification.timeout <= 0 || setTimeout === undefined) {\r\n            return;\r\n        }\r\n\r\n        // Clear the timeout.\r\n        clearTimeout(this.timer);\r\n    }\r\n\r\n    private startTimeout() {\r\n        // Calculate the steps of the timeout.\r\n        this.steps = this.notification.timeout / 10;\r\n\r\n        // Calculate the speed of the timeout.\r\n        this.speed = this.notification.timeout / this.steps;\r\n\r\n        // Get the start time.\r\n        this.startTime = new Date().getTime();\r\n\r\n        // Set a new timer outside of Angular.\r\n        this.zone.runOutsideAngular(() => this.timer = setTimeout(this.instance, this.speed));\r\n    }\r\n\r\n    private instance = () => {\r\n        // Calculate the difference.\r\n        this.difference = (new Date().getTime() - this.startTime) - (this.count * this.speed);\r\n\r\n        // Add up the count.\r\n        if (this.count++ === this.steps) {\r\n            this.onDestroy.emit(this.notification);\r\n        }\r\n\r\n        // Add the steps to the progress.\r\n        this.progress += 100 / this.steps;\r\n\r\n        // Set a new timer.\r\n        this.timer = setTimeout(this.instance, (this.speed - this.difference));\r\n\r\n        // Run a new change detection cycle.\r\n        this.zone.run(() => this.changeDetection.detectChanges());\r\n    };\r\n\r\n}\r\n",
    "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxTranslationsModule} from '@stanvanheumen/ngx-translations';\r\n\r\nimport {NgxNotificationsListComponent} from './notifications-list/notifications-list.component';\r\nimport {NgxNotificationsItemComponent} from './notifications-item/notifications-item.component';\r\n\r\nimport {NotificationsService} from './notifications.service';\r\nimport {NotificationOptions} from './notifications.interface';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, NgxTranslationsModule],\r\n    declarations: [NgxNotificationsListComponent, NgxNotificationsItemComponent],\r\n    exports: [NgxNotificationsListComponent]\r\n})\r\nexport class NgxNotificationsModule {\r\n\r\n    static forRoot(options: NotificationOptions = {}) {\r\n        return {\r\n            ngModule: NgxNotificationsModule,\r\n            providers: [\r\n                NotificationsService,\r\n                {provide: NotificationOptions, useValue: options}\r\n            ]\r\n        };\r\n    }\r\n\r\n}\r\n"
  ],
  "names": [
    "Success",
    "Error",
    "Warning",
    "Info",
    "NotificationOptions",
    "NotificationsService",
    "options",
    "this",
    "defaultTitles",
    "_a",
    "NotificationType",
    "defaultIcons",
    "_b",
    "defaultTimeout",
    "defaultClosable",
    "list$",
    "BehaviorSubject",
    "timeout",
    "undefined",
    "closable",
    "Object",
    "assign",
    "titles",
    "icons",
    "defineProperty",
    "prototype",
    "get",
    "success",
    "text",
    "create",
    "type",
    "error",
    "warn",
    "info",
    "notification",
    "item",
    "compose",
    "push",
    "transform",
    "callback",
    "newNotifications",
    "getValue",
    "next",
    "delete",
    "pull",
    "list",
    "forEach",
    "index",
    "id",
    "splice",
    "Math",
    "random",
    "toString",
    "substr",
    "title",
    "icon",
    "Injectable",
    "decorators",
    "Optional",
    "NgxNotificationsListComponent",
    "notifications",
    "trackById",
    "ngOnInit",
    "notifications$",
    "items",
    "onNotificationDestroy",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "animations",
    "trigger",
    "transition",
    "query",
    "style",
    "opacity",
    "optional",
    "stagger",
    "animate",
    "keyframes",
    "offset",
    "height",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "preserveWhitespaces",
    "NgxNotificationsItemComponent",
    "zone",
    "_this",
    "onDestroy",
    "EventEmitter",
    "progress",
    "count",
    "instance",
    "difference",
    "Date",
    "getTime",
    "startTime",
    "speed",
    "steps",
    "emit",
    "timer",
    "setTimeout",
    "run",
    "detectChanges",
    "min",
    "startTimeout",
    "ngOnDestroy",
    "clearTimeout",
    "runOutsideAngular",
    "NgZone",
    "ChangeDetectorRef",
    "Input",
    "Output",
    "NgxNotificationsModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "NgxTranslationsModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
