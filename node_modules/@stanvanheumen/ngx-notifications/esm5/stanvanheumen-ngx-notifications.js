import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Injectable, Optional, ChangeDetectionStrategy, Component, ChangeDetectorRef, EventEmitter, Input, NgZone, Output, NgModule } from '@angular/core';
import { trigger, animate, style, transition, query, stagger, keyframes } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { NgxTranslationsModule } from '@stanvanheumen/ngx-translations';

var NotificationType = {
    Success: 'success',
    Error: 'error',
    Warning: 'warning',
    Info: 'info',
};
var NotificationOptions = /** @class */ (function () {
    function NotificationOptions() {
    }
    return NotificationOptions;
}());
var NotificationsService = /** @class */ (function () {
    function NotificationsService(options) {
        this.options = options;
        this.defaultTitles = (_a = {}, _a[NotificationType.Success] = 'Action was successful', _a[NotificationType.Error] = 'Action did fail', _a[NotificationType.Warning] = 'Warning', _a[NotificationType.Info] = 'Information', _a);
        this.defaultIcons = (_b = {}, _b[NotificationType.Success] = 'check_circle', _b[NotificationType.Error] = 'error_outline', _b[NotificationType.Warning] = 'error_outline', _b[NotificationType.Info] = 'info_outline', _b);
        this.defaultTimeout = 4000;
        this.defaultClosable = true;
        this.list$ = new BehaviorSubject([]);
        if (!options) {
            throw new Error('No NotificationOptions were received.');
        }
        this.defaultTimeout = options.timeout === undefined ? this.defaultTimeout : options.timeout;
        this.defaultClosable = options.closable === undefined ? this.defaultClosable : options.closable;
        this.defaultTitles = Object.assign(this.defaultTitles, options.titles || {});
        this.defaultIcons = Object.assign(this.defaultIcons, options.icons || {});
        var _a, _b;
    }
    Object.defineProperty(NotificationsService.prototype, "items", {
        get: function () {
            return this.list$;
        },
        enumerable: true,
        configurable: true
    });
    NotificationsService.prototype.success = function (text, timeout) {
        if (timeout === void 0) { timeout = this.defaultTimeout; }
        this.create({ text: text, timeout: timeout, type: NotificationType.Success });
    };
    NotificationsService.prototype.error = function (text, timeout) {
        if (timeout === void 0) { timeout = this.defaultTimeout; }
        this.create({ text: text, timeout: timeout, type: NotificationType.Error });
    };
    NotificationsService.prototype.warn = function (text, timeout) {
        if (timeout === void 0) { timeout = this.defaultTimeout; }
        this.create({ text: text, timeout: timeout, type: NotificationType.Warning });
    };
    NotificationsService.prototype.info = function (text, timeout) {
        if (timeout === void 0) { timeout = this.defaultTimeout; }
        this.create({ text: text, timeout: timeout, type: NotificationType.Info });
    };
    NotificationsService.prototype.create = function (notification) {
        var item = this.compose(notification);
        this.push(item);
    };
    NotificationsService.prototype.transform = function (callback) {
        var oldNotifications = this.list$.getValue();
        var newNotifications = callback(oldNotifications);
        this.list$.next(newNotifications);
    };
    NotificationsService.prototype.delete = function (notification) {
        return this.pull(notification);
    };
    NotificationsService.prototype.push = function (notification) {
        var list = this.list$.getValue();
        list.push(notification);
        this.list$.next(list);
    };
    NotificationsService.prototype.pull = function (notification) {
        var list = this.list$.getValue();
        list.forEach(function (item, index) {
            if (item.id === notification.id) {
                list.splice(index, 1);
            }
        });
        this.list$.next(list);
    };
    NotificationsService.prototype.compose = function (notification) {
        notification.id = Math.random().toString(36).substr(2, 10);
        notification.closable = notification.closable !== undefined ? notification.closable : this.defaultClosable;
        notification.title = notification.title || this.defaultTitles[notification.type];
        notification.icon = notification.icon || this.defaultIcons[notification.type];
        notification.timeout = notification.timeout !== undefined ? notification.timeout : this.defaultTimeout;
        return notification;
    };
    return NotificationsService;
}());
NotificationsService.decorators = [
    { type: Injectable },
];
NotificationsService.ctorParameters = function () { return [
    { type: NotificationOptions, decorators: [{ type: Optional },] },
]; };
var NgxNotificationsListComponent = /** @class */ (function () {
    function NgxNotificationsListComponent(notifications) {
        this.notifications = notifications;
        this.trackById = function (index, item) {
            return item.id;
        };
    }
    NgxNotificationsListComponent.prototype.ngOnInit = function () {
        this.notifications$ = this.notifications.items;
    };
    NgxNotificationsListComponent.prototype.onNotificationDestroy = function (notification) {
        this.notifications.delete(notification);
    };
    return NgxNotificationsListComponent;
}());
NgxNotificationsListComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-notifications-list',
                template: "<div *ngIf=\"notifications$ | async as notifications\" class=\"ngx-notifications-wrapper\">\n    <div [@listAnimation]=\"notifications.length\" class=\"ngx-notifications-list\">\n        <div *ngFor=\"let notification of notifications; trackBy: trackById\" class=\"ngx-notifications-item\">\n            <ngx-notifications-item [notification]=\"notification\"\n                                    (onDestroy)=\"onNotificationDestroy($event)\"></ngx-notifications-item>\n        </div>\n    </div>\n</div>",
                styles: [".ngx-notifications-wrapper{\n  top:0;\n  left:0;\n  right:0;\n  bottom:0;\n  z-index:400;\n  position:fixed;\n  pointer-events:none; }\n.ngx-notifications-list{\n  padding:0;\n  width:100%;\n  display:block;\n  max-width:420px;\n  margin-left:auto;\n  position:relative; }\n.ngx-notifications-item{\n  margin:0;\n  padding:0;\n  pointer-events:all; }\n"],
                animations: [trigger('listAnimation', [
                        transition('* => *', [
                            query(':enter', style({ opacity: 0 }), { optional: true }),
                            query(':enter', stagger('500ms', [
                                animate('500ms cubic-bezier(0, 0, .2, 1)', keyframes([
                                    style({ opacity: 0, transform: 'translateX(50%)', offset: 0 }),
                                    style({ opacity: 1, transform: 'translateX(0)', offset: 1.0 })
                                ]))
                            ]), { optional: true }),
                            query(':leave', stagger('500ms', [
                                animate('500ms cubic-bezier(0, 0, .2, 1)', keyframes([
                                    style({ height: '*', opacity: 1, transform: 'translateX(0)', offset: 0 }),
                                    style({ height: '*', opacity: 0, transform: 'translateX(-25%)', offset: 0.9 }),
                                    style({ height: 0, opacity: 0, transform: 'translateX(-25%)', offset: 1.0 })
                                ]))
                            ]), { optional: true })
                        ])
                    ])],
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
NgxNotificationsListComponent.ctorParameters = function () { return [
    { type: NotificationsService, },
]; };
var NgxNotificationsItemComponent = /** @class */ (function () {
    function NgxNotificationsItemComponent(zone, changeDetection) {
        var _this = this;
        this.zone = zone;
        this.changeDetection = changeDetection;
        this.onDestroy = new EventEmitter();
        this.progress = 0;
        this.count = 0;
        this.instance = function () {
            _this.difference = (new Date().getTime() - _this.startTime) - (_this.count * _this.speed);
            if (_this.count++ === _this.steps) {
                _this.onDestroy.emit(_this.notification);
            }
            _this.progress += 100 / _this.steps;
            _this.timer = setTimeout(_this.instance, (_this.speed - _this.difference));
            _this.zone.run(function () { return _this.changeDetection.detectChanges(); });
        };
    }
    Object.defineProperty(NgxNotificationsItemComponent.prototype, "progressWidth", {
        get: function () {
            return Math.min(this.progress, 100) + '%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxNotificationsItemComponent.prototype, "notificationClasses", {
        get: function () {
            return _a = {}, _a['ngx-notification--' + this.notification.type] = true, _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxNotificationsItemComponent.prototype, "progressBarClasses", {
        get: function () {
            return _a = {}, _a['ngx-notification-progress--' + this.notification.type] = true, _a;
            var _a;
        },
        enumerable: true,
        configurable: true
    });
    NgxNotificationsItemComponent.prototype.ngOnInit = function () {
        if (this.notification.timeout <= 0 || setTimeout === undefined) {
            this.notification.closable = true;
            return;
        }
        this.startTimeout();
    };
    NgxNotificationsItemComponent.prototype.ngOnDestroy = function () {
        if (this.notification.timeout <= 0 || setTimeout === undefined) {
            return;
        }
        clearTimeout(this.timer);
    };
    NgxNotificationsItemComponent.prototype.startTimeout = function () {
        var _this = this;
        this.steps = this.notification.timeout / 10;
        this.speed = this.notification.timeout / this.steps;
        this.startTime = new Date().getTime();
        this.zone.runOutsideAngular(function () { return _this.timer = setTimeout(_this.instance, _this.speed); });
    };
    return NgxNotificationsItemComponent;
}());
NgxNotificationsItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-notifications-item',
                template: "<div [ngClass]=\"notificationClasses\"\n     class=\"ngx-notification\">\n    <i class=\"material-icons ngx-notification-icon\">{{ notification.icon }}</i>\n    <div class=\"ngx-notification-data\">\n        <h1 class=\"ngx-notification-title\">{{ notification.title | translate }}</h1>\n        <p class=\"ngx-notification-text\">{{ notification.text | translate }}</p>\n    </div>\n    <div *ngIf=\"notification.closable\"\n         (click)=\"onDestroy.emit(notification)\"\n         class=\"ngx-notification-clear\">\n        <i class=\"material-icons\">clear</i>\n    </div>\n    <div *ngIf=\"notification.timeout > 0\"\n         [ngClass]=\"progressBarClasses\"\n         [style.width]=\"progressWidth\"\n         class=\"ngx-notification-progress\"></div>\n</div>",
                styles: [".ngx-notification-icon{\n  margin-right:10px; }\n.ngx-notification-data{\n  width:100%; }\n.ngx-notification-title{\n  display:block;\n  font-size:16px;\n  max-width:100%;\n  overflow:hidden;\n  line-height:1.5;\n  white-space:nowrap;\n  margin:0 30px 4px 0;\n  text-overflow:ellipsis; }\n.ngx-notification-text{\n  margin:0;\n  line-height:1.3;\n  color:rgba(255, 255, 255, 0.6); }\n.ngx-notification{\n  color:white;\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex;\n  font-weight:500;\n  -webkit-user-select:none;\n     -moz-user-select:none;\n      -ms-user-select:none;\n          user-select:none;\n  position:relative;\n  border-radius:4px;\n  margin:10px 10px 0;\n  padding:10px 10px 14px;\n  -webkit-box-pack:center;\n      -ms-flex-pack:center;\n          justify-content:center;\n  font-family:'Roboto', sans-serif;\n  -webkit-box-shadow:0 1px 2px rgba(0, 0, 0, 0.2);\n          box-shadow:0 1px 2px rgba(0, 0, 0, 0.2); }\n  .ngx-notification--success{\n    background-color:#43a047;\n    border-left:4px solid #295f2d; }\n  .ngx-notification--error{\n    background-color:#be2c2c;\n    border-left:4px solid #7e2020; }\n  .ngx-notification--warning{\n    background-color:#f57f17;\n    border-left:4px solid #ac7a26; }\n    .ngx-notification--warning .ngx-notification-text{\n      color:rgba(0, 0, 0, 0.6); }\n  .ngx-notification--info{\n    background-color:#5e35b1;\n    border-left:4px solid #191b1f; }\n.ngx-notification-clear{\n  top:0;\n  right:0;\n  width:30px;\n  height:30px;\n  margin:5px;\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex;\n  cursor:pointer;\n  position:absolute;\n  border-radius:4px;\n  -webkit-box-align:center;\n      -ms-flex-align:center;\n          align-items:center;\n  -webkit-box-pack:center;\n      -ms-flex-pack:center;\n          justify-content:center;\n  -webkit-transition:background-color 200ms cubic-bezier(0, 0, 0.2, 1);\n  transition:background-color 200ms cubic-bezier(0, 0, 0.2, 1); }\n  .ngx-notification-clear:hover{\n    background-color:rgba(0, 0, 0, 0.15); }\n  .ngx-notification-clear:active{\n    background-color:rgba(0, 0, 0, 0.25); }\n.ngx-notification-progress{\n  left:0;\n  bottom:0;\n  height:4px;\n  position:absolute;\n  background-color:rgba(0, 0, 0, 0.2); }\n  .ngx-notification-progress--success{\n    background-color:#295f2d; }\n  .ngx-notification-progress--error{\n    background-color:#7e2020; }\n  .ngx-notification-progress--warning{\n    background-color:#ac7a26; }\n  .ngx-notification-progress--info{\n    background-color:#191b1f; }\n"],
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
NgxNotificationsItemComponent.ctorParameters = function () { return [
    { type: NgZone, },
    { type: ChangeDetectorRef, },
]; };
NgxNotificationsItemComponent.propDecorators = {
    "notification": [{ type: Input },],
    "onDestroy": [{ type: Output },],
};
var NgxNotificationsModule = /** @class */ (function () {
    function NgxNotificationsModule() {
    }
    NgxNotificationsModule.forRoot = function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: NgxNotificationsModule,
            providers: [
                NotificationsService,
                { provide: NotificationOptions, useValue: options }
            ]
        };
    };
    return NgxNotificationsModule;
}());
NgxNotificationsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgxTranslationsModule],
                declarations: [NgxNotificationsListComponent, NgxNotificationsItemComponent],
                exports: [NgxNotificationsListComponent]
            },] },
];
NgxNotificationsModule.ctorParameters = function () { return []; };

export { NgxNotificationsModule, NotificationsService, NotificationType, NotificationOptions, NgxNotificationsListComponent, NgxNotificationsItemComponent as ɵa };
//# sourceMappingURL=stanvanheumen-ngx-notifications.js.map
